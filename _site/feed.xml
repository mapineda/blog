<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-29T21:05:44-05:00</updated><id>http://localhost:4000/</id><title type="html">Owlery Club</title><subtitle>In the professional world of tomorrow, you have to know two things, the basics of business and the basics of coding.</subtitle><entry><title type="html">Get Started As A UX Designer</title><link href="http://localhost:4000/2019/04/29/get-started-as-a-ux-designer/" rel="alternate" type="text/html" title="Get Started As A UX Designer" /><published>2019-04-29T13:31:00-05:00</published><updated>2019-04-29T13:31:00-05:00</updated><id>http://localhost:4000/2019/04/29/get-started-as-a-ux-designer</id><content type="html" xml:base="http://localhost:4000/2019/04/29/get-started-as-a-ux-designer/">&lt;p&gt;
If you're thinking about getting into tech, UX Designer may be for you.
Note: post inspired by this
&lt;a href=&quot;https://cvcompiler.com/blog/do-designers-dream-of-electric-sheep-the-most-demanded-design-tech-skills/&quot;&gt;post&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This is a brief overview over the tools, knowledge and resources to help you on
 your way to becoming a UX Designer.
&lt;/p&gt;

&lt;h2&gt;Why UX Designer?&lt;/h2&gt;
&lt;p&gt;Money&lt;/p&gt;
&lt;p&gt;Fun&lt;/p&gt;

&lt;h3&gt;TLDR&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/netoguimaraes/awesome-ux&quot;&gt;Awesome UX&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/micromata/awesome-javascript-learning&quot;&gt;Awesome JS&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/awesome-css-group/awesome-css#readme&quot;&gt;Awesome CSS&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/diegocard/awesome-html5#readme&quot;&gt;Awesome HTML&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;h3&gt;Toolbox: Dev&lt;/h3&gt;
&lt;p&gt;
   A good UX designer can mock up a high-res design and then should be able
   to confidently implement that code with html, css, and if need be, basic
   javascript. Git is a tool that is helpful for version control. For now,
   think of it as a place to store your code.
   &lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Javascript &lt;/li&gt;
    &lt;li&gt;HTML5 &lt;/li&gt;
    &lt;li&gt;CSS3 &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;Git &lt;span&gt;# this will make your resume stand out &lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;h3&gt;Toolbox: Design Software&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Sketch&lt;/li&gt;
    &lt;li&gt;inVision&lt;/li&gt;
    &lt;li&gt;Balsamiq&lt;/li&gt;
  &lt;/ul&gt;

&lt;h3&gt;Toolbox: Design Methodologies&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://uxplanet.org/most-common-ux-design-methods-and-techniques-c9a9fdc25a1e&quot;&gt;Most Common UX Methods &amp;amp; Techniques&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://uxdesign.cc/ux-design-methods-deliverables-657f54ce3c7d&quot;&gt;UX Design Deliverables&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;h3&gt;Articles&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Design Process&lt;/li&gt;
    &lt;li&gt;Material Design&lt;/li&gt;
  &lt;/ul&gt;

&lt;h3&gt;Javascript Resources&lt;/h3&gt;
&lt;p&gt;For an even more comprehensive list, check this
   &lt;a href=&quot;https://github.com/snipcart/learn-vanilla-js&quot;&gt;link&lt;/a&gt;
   &lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://javascript30.com/&quot;&gt;Javascript 30 - learn JS in 30 days&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://www.learn-js.org/&quot;&gt;Learn JS&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.codecademy.com/learn/introduction-to-javascript&quot;&gt;Intro to JS&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/micromata/awesome-javascript-learning&quot;&gt;&lt;/a&gt;Awesome JS&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://javascript.info/&quot;&gt;JS Info&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://javascriptissexy.com/how-to-learn-javascript-properly/&quot;&gt;JS is Sexy&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;h3&gt;HTML Resources&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.codecademy.com/learn/learn-html&quot;&gt;Learn HTML&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://html.com/&quot;&gt;HTML official tutorial&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/learn-html-in-5-minutes-ccd378d2ab72&quot;&gt;Learn html in 5 mins&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;h4&gt;Books&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://www.amazon.com/HTML-CSS-Design-Build-Websites/dp/1118871642&quot;&gt;
       HTML CSS Design: Build Websites
      &lt;/a&gt;
      &lt;/li&gt;
    &lt;li&gt;Material Design&lt;/li&gt;
  &lt;/ul&gt;

&lt;h3&gt;CSS Resources&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.codecademy.com/learn/learn-css&quot;&gt;Learn CSS&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://zendev.com/ultimate-guide-to-learning-css.html&quot;&gt;Ultimate Guide to Learning CSS&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/where-do-you-learn-html-css-in-2019/&quot;&gt;Where do you learn html/css in 2019&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;h3&gt;Git Resources&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Design Process&lt;/li&gt;
    &lt;li&gt;Material Design&lt;/li&gt;
  &lt;/ul&gt;

&lt;hr /&gt;

&lt;h4&gt;How to get started&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Create &lt;a href=&quot;https://github.com/&quot;&gt;GitHub account &lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;Create dribbble account&lt;/li&gt;
  &lt;li&gt;Read UX Blogs&lt;/li&gt;
  &lt;li&gt;Explore &amp;amp; Create Codepen&lt;/li&gt;
  &lt;li&gt;Create in pure CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you enjoyed this writeup, if you have any questions, feel free to tweet at me: &lt;a href=&quot;https://twitter.com/marcoapineda13&quot;&gt;@marcoapineda13 &lt;/a&gt;&lt;/p&gt;</content><author><name>Marco Pineda</name></author><summary type="html">If you're thinking about getting into tech, UX Designer may be for you. Note: post inspired by this post</summary></entry><entry><title type="html">Basics of Computer Vision &amp;amp; OpenCV</title><link href="http://localhost:4000/2017/06/24/basics-of-computer-vision-and-open-cv/" rel="alternate" type="text/html" title="Basics of Computer Vision &amp; OpenCV" /><published>2017-06-24T03:07:00-05:00</published><updated>2017-06-24T03:07:00-05:00</updated><id>http://localhost:4000/2017/06/24/basics-of-computer-vision-and-open-cv</id><content type="html" xml:base="http://localhost:4000/2017/06/24/basics-of-computer-vision-and-open-cv/">&lt;p&gt;
  This post covers the basics of Computer Vision and Open CV.
  &lt;p&gt;

  &lt;h2&gt;Topics Covered:&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;What are Images?&lt;/li&gt;
      &lt;li&gt;How Images Are Formed.&lt;/li&gt;
      &lt;li&gt;Storing Images on Computers&lt;/li&gt;
      &lt;li&gt;Getting Started with OpenCV: reading, writing, displaying images&lt;/li&gt;
      &lt;li&gt;Grayscaling&lt;/li&gt;
      &lt;li&gt;Color Spaces&lt;/li&gt;
      &lt;li&gt;Histograms&lt;/li&gt;
      &lt;li&gt;Drawing Images&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h1&gt;Getting Started:&lt;/h1&gt;
    &lt;hr /&gt;

      &lt;h2&gt;What Are Images?&lt;/h2&gt;
        &lt;ul&gt;
          &lt;li&gt;2-Dimensional representations of the visible light spectrum.&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;Examples:&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;photographs&lt;/li&gt;
            &lt;li&gt;picture on laptop screen&lt;/li&gt;
          &lt;/ul&gt;

      &lt;h3&gt;Vocabulary:&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;DPI - Dots Per Image&lt;/li&gt;
        &lt;li&gt;Visible Light Spectrum - wavelengths of light human eyes can detect&lt;/li&gt;
      &lt;/ul&gt;

&lt;hr /&gt;

      &lt;h2&gt;How are Images Formed??&lt;/h2&gt;
        &lt;ul&gt;
          &lt;li&gt;Images are formed when light hits an object, relects off the object onto a film, sensor or retina.&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;To optimize images, we use a small opening called an aperature to block off excess light and focus the image; reducing blur. We can also use lenses to control the image formation.&lt;/p&gt;

        &lt;h3&gt;Lenses&lt;/h3&gt;
        &lt;p&gt;Both our eyes and cameras use an adaptive lens to control many aspects of the image formation such as:&lt;/p&gt;

        &lt;p&gt;Aperature Size&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Controls the amount of light allowed through (f-stops in cameras)&lt;/li&gt;
            &lt;li&gt;Depth of field(Bokeh)&lt;/li&gt;
          &lt;/ul&gt;

        &lt;p&gt;Length Width&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Adjust focus distance (near or far)&lt;/li&gt;
          &lt;/ul&gt;

        &lt;h3&gt;How Humans See&lt;/h3&gt;
        &lt;p&gt;Both our eyes and cameras use an adaptive lens to control many aspects of the image formation such as:&lt;/p&gt;

        &lt;h3&gt;How Computers See - OpenCV&lt;/h3&gt;
        &lt;p&gt;OpenCV uses RGB (Red, Green, Blue) color space by default.&lt;/p&gt;

        &lt;p&gt;Each pixel(x,y) in an image has 3 values ranging in 0 - 255(8-bit)&lt;/p&gt;

        &lt;p&gt;Those values are:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Red&lt;/li&gt;
          &lt;li&gt;Green&lt;/li&gt;
          &lt;li&gt;Blue&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;Mixing different color intensities of each color gives us the full color spectrum, example Yellow:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Red - 255&lt;/li&gt;
          &lt;li&gt;Green - 255 &lt;/li&gt;
          &lt;li&gt;Blue - 0 &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;Length Width&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;Adjust focus distance (near or far)&lt;/li&gt;
          &lt;/ul&gt;

&lt;hr /&gt;
    &lt;h2&gt;How A Computer Stores Images&lt;/h2&gt;

    &lt;p&gt;Images are stored in multi-dimensional arrays&lt;/p&gt;

    &lt;p&gt;Think of an array as a table.&lt;/p&gt;
    &lt;label&gt;1-Dimensional Table&lt;/label&gt;

    &lt;table&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/table&gt;


    &lt;h3&gt;Black, White or Grayscale&lt;/h3&gt;

    &lt;p&gt;Black and white image, images are saved in a 2-Dimensional array.&lt;/p&gt;

    &lt;p&gt;Two types of B&amp;amp;W images&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Grayscale - ranges in shades of gray&lt;/li&gt;
      &lt;li&gt;Binary - pixels are either black or white&lt;/li&gt;
    &lt;/ul&gt;
&lt;hr /&gt;

  &lt;h2&gt;Getting Started With OpenCV&lt;/h2&gt;

    &lt;h3&gt;What is OpenCV?&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;OpenCV = Open Computer Vision&lt;/li&gt;
        &lt;li&gt;Launched in 1999 by Intel&lt;/li&gt;
        &lt;li&gt;Written in C++&lt;/li&gt;
        &lt;li&gt;1st major release in 2006, second in 2009 and third in 2015&lt;/li&gt;
        &lt;li&gt;Latest stable version is OpeCV 2.4.13&lt;/li&gt;
      &lt;/ul&gt;

    &lt;h3&gt;Get Started - Reading, Writing &amp;amp; Displaying Images:&lt;/h3&gt;
    &lt;p&gt;See tutorial on reading, writing and displaying images using OpenCV&lt;/p&gt;
&lt;hr /&gt;

  &lt;h2&gt;Grayscaling&lt;/h2&gt;

    &lt;h3&gt;Why Grayscaling?&lt;/h3&gt;
    &lt;p&gt;In OpenCV, many functions grayscale images before processing. This is done to simplify the image to reduce noise and increase processing time as there is less information in the image.&lt;/p&gt;

    &lt;h3&gt;What is Grayscaling?&lt;/h3&gt;
    &lt;p&gt;Converting an image from full color to shades of gray (black &amp;amp; white).&lt;/p&gt;

    &lt;h3&gt;Getting Started: Grayscaling Tutorial &lt;/h3&gt;
    &lt;p&gt;See tutorial on Grayscaling using OpenCV&lt;/p&gt;
    &lt;p&gt;In the tutorial you will learn:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;How to convert color image to grayscale&lt;/li&gt;
    &lt;/ul&gt;

&lt;pre&gt;
#import packages
import cv2
import numpy as np

#read image using cv2.imread()
input = cv2.imread('./images/input.jpg', 0)

#output to grayscale using cv2.imshow()
cv2.imshow('Grayscale', input)
cv2.waitKey(0)
cv2.destroyAllWindows()
&lt;/pre&gt;

&lt;hr /&gt;
  &lt;h2&gt;Color Spaces&lt;/h2&gt;

    &lt;h3&gt;What are Color Spaces?&lt;/h3&gt;
    &lt;p&gt;Color spaces are a way to represent color.&lt;/p&gt;

    &lt;p&gt;The most common terms to represent color:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;RGB - Red, Gree, Blue&lt;/li&gt;
      &lt;li&gt;HSV - Hue, Saturation, Value&lt;/li&gt;
      &lt;li&gt;CMYK - Cyan, Magenta, Yellow, Black(K)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;h3&gt;Getting Started: Color Spaces Tutorial &lt;/h3&gt;
    &lt;p&gt;See tutorial on Color Spaces using OpenCV&lt;/p&gt;

&lt;hr /&gt;

  &lt;h2&gt;Histograms&lt;/h2&gt;

    &lt;h3&gt;Why Histograms?&lt;/h3&gt;
    &lt;p&gt;Great way to visualize individual color components.&lt;/p&gt;

    &lt;h3&gt;Getting Started: Histogram Tutorial &lt;/h3&gt;
    &lt;p&gt;See tutorial on Histograms using OpenCV&lt;/p&gt;

&lt;hr /&gt;
  &lt;h2&gt;Drawing Images&lt;/h2&gt;

    &lt;h3&gt;Getting Started: Drawing Tutorial &lt;/h3&gt;
    &lt;p&gt;See tutorial on Drawing Images using OpenCV&lt;/p&gt;

&lt;hr /&gt;
&lt;/p&gt;&lt;/p&gt;</content><author><name>Marco Pineda</name></author><summary type="html">This post covers the basics of Computer Vision and Open CV.</summary></entry><entry><title type="html">How To Host Static Site using AWS S3 - Tutorial</title><link href="http://localhost:4000/2017/01/08/aws-s3-static-site-tutorial/" rel="alternate" type="text/html" title="How To Host Static Site using AWS S3 - Tutorial" /><published>2017-01-08T03:07:00-06:00</published><updated>2017-01-08T03:07:00-06:00</updated><id>http://localhost:4000/2017/01/08/aws-s3-static-site-tutorial</id><content type="html" xml:base="http://localhost:4000/2017/01/08/aws-s3-static-site-tutorial/">&lt;p&gt;
AWS is the uncontested IAAS provider. Sure, there are other services like Azure, Google Cloud and VMware but none come close to matching Amazon's suite of services. I've studying up to take the AWS Certified Cloud Architect - Associate exam ( shout out to &lt;a href=&quot;https://twitter.com/samkroon&quot;&gt;Sam Kroonenburg&lt;/a&gt; and &lt;a href=&quot;https://t.co/VbhlVUys1z&quot;&gt;acloud.guru&lt;/a&gt; for an awesome course! ) and today I've learned how to host a static site using AWS S3. Tonight, I will pass on this knowledge on to you.
&lt;/p&gt;

&lt;p&gt;
This tutorial assumes you have an AWS account (if not, create a free one, super easy) and that you know basic HTML.
Before we get into the tutorial, let's review why hosting on S3 is so wonderful. Skip this if you want to get to the tutorial.
&lt;/p&gt;

&lt;h2&gt;Why S3?&lt;/h2&gt;
&lt;p&gt;Several benefits to using S3 to host static websites. For example if you were hosting some big event and needed a landing page, S3 would be the place to do it. Below is a list of pros and cons to using S3.&lt;/p&gt;

&lt;h4&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Simple&lt;/li&gt;
    &lt;li&gt;Scales Automatically&lt;/li&gt;
    &lt;li&gt;Serverless&lt;/li&gt;
    &lt;li&gt;Don't have to worry about load balancing&lt;/li&gt;
  &lt;/ul&gt;

&lt;h4&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Static content only&lt;/li&gt;
    &lt;li&gt;Can't do something server-side&lt;/li&gt;
  &lt;/ul&gt;

&lt;p&gt;Let me reiterate that S3 is only for static content. This means no Dot Net, PHP etc. S3 is ideal for landing pages.&lt;/p&gt;

&lt;p&gt;&lt;!-- IMAGE OF S3 HERE --&gt;
  &lt;a href=&quot;#&quot;&gt;
      &lt;img src=&quot;/img/s3-bg.png&quot; alt=&quot;AWS S3 Image&quot; /&gt;
  &lt;/a&gt;
  &lt;span class=&quot;caption text-muted&quot;&gt;S3. S3 is property of Amazon.&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Le Grand Tutorial&lt;/h3&gt;
&lt;p&gt;
  Alright, you've made it this far. Great! Let's get to it. This tutorial assumes you've already made a free AWS account. Go ahead and &lt;a href=&quot;https://aws.amazon.com/console/&quot; target=&quot;blank&quot;&gt;log in&lt;/a&gt;.  
  &lt;/p&gt;

&lt;h3&gt;Step 1&lt;/h3&gt;
&lt;p&gt;
  Once you're logged in to AWS Management Console, navigate to Services and Click on S3.
  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
      &lt;img src=&quot;/img/step1.png&quot; alt=&quot;AWS S3 Image&quot; /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Step 2&lt;/h3&gt;
&lt;p&gt;
   Once in S3, go ahead and create a new bucket. Name the bucket, leave everything as default and click NEXT.
  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
      &lt;img src=&quot;/img/create-bucket.png&quot; alt=&quot;AWS S3 Bucket Image&quot; /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Step 3&lt;/h3&gt;
&lt;p&gt;
  Click the bucket, go into properties and select &quot;STATIC WEBSITE HOSTING&quot;, then choose &quot;Use this bucket to host a website&quot;. Make the landing page &quot;index.html&quot; and the error page &quot;error.html&quot;
  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
      &lt;img src=&quot;/img/static-web-site-hosting.png&quot; alt=&quot;AWS Static Site Hosting Image&quot; /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Step 4&lt;/h3&gt;
&lt;p&gt;
  Create an index.html page and error.html page in your favorite code editor. I'm using Atom.
  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
      &lt;img src=&quot;/img/index-example.png&quot; alt=&quot;Atom Code Editor&quot; /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Step 5&lt;/h3&gt;
&lt;p&gt;
  Go back to S3 Bucket and go ahead and upload the files. Go ahead and hit next.
  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
      &lt;img src=&quot;/img/upload.png&quot; alt=&quot;Upload AWS S3 Image&quot; /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Step 6&lt;/h3&gt;
&lt;p&gt;
   Go into your bucket, go to Permissions, Click on Everyone then tick the box that says Read to make your site public so Everyone can Read and see your site.
  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
      &lt;img src=&quot;/img/permissions.png&quot; alt=&quot;Permissions AWS S3 Image&quot; /&gt;
  &lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Step 7&lt;/h3&gt;
&lt;p&gt;
  Go into properties, go to static site hosting and click on the AWS endpoint to take you to your newly hosted static site!
  &lt;/p&gt;

&lt;p&gt;Hope you enjoyed this tutorial, if you have any questions, feel free to tweet at me: &lt;a href=&quot;https://twitter.com/marcoapineda13&quot;&gt;@marcoapineda13 &lt;/a&gt;&lt;/p&gt;</content><author><name>Marco Pineda</name></author><summary type="html">AWS is the uncontested IAAS provider. Sure, there are other services like Azure, Google Cloud and VMware but none come close to matching Amazon's suite of services. I've studying up to take the AWS Certified Cloud Architect - Associate exam ( shout out to Sam Kroonenburg and acloud.guru for an awesome course! ) and today I've learned how to host a static site using AWS S3. Tonight, I will pass on this knowledge on to you.</summary></entry><entry><title type="html">Angular 2 vs React</title><link href="http://localhost:4000/2016/08/14/angular-2-vs-react/" rel="alternate" type="text/html" title="Angular 2 vs React" /><published>2016-08-14T20:27:00-05:00</published><updated>2016-08-14T20:27:00-05:00</updated><id>http://localhost:4000/2016/08/14/angular-2-vs-react</id><content type="html" xml:base="http://localhost:4000/2016/08/14/angular-2-vs-react/">&lt;p&gt;
Do a google search of 'javascript frameworks' and you get nearly 39MM results in .55 seconds. A top five search on Github lists these frameworks as the most popular in order from most popular to least:
&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Angular&lt;/li&gt;
    &lt;li&gt;React&lt;/li&gt;
    &lt;li&gt;Backbone&lt;/li&gt;
    &lt;li&gt;Ember&lt;/li&gt;
    &lt;li&gt;Polymer&lt;/li&gt;  
  &lt;/ol&gt;

&lt;p&gt;
  This article takes an in depth look at the top two frameworks in the JavaScript development community, Angular 2 and React
  &lt;/p&gt;

&lt;h2&gt;Angular&lt;/h2&gt;
&lt;p&gt;
  Created in 2009 by Google, Angular is considered the most used JavaScript framework for developing Single Page Applications (SPA)
  Most recently, Angular 2 hit beta. I'll be comparing Angular 1 vs Angular 2 in another blog post coming soon. This post will compare Angular 2 vs React

  &lt;strong&gt;Disclaimer&lt;/strong&gt;: Technically, yes, React is a library and Angular, a framework; however, they still aid in the MV* functionality of the web and such can be compared.

  &lt;/p&gt;

&lt;p&gt;&lt;!-- IMAGE OF ANGULAR HERE --&gt;
  &lt;a href=&quot;#&quot;&gt;
      &lt;img src=&quot;/img/angular-bg.png&quot; alt=&quot;Angular Image&quot; /&gt;
  &lt;/a&gt;
  &lt;span class=&quot;caption text-muted&quot;&gt;Angular Logo. Angular is maintained by Google.&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Features of Angular&lt;/h3&gt;
&lt;p&gt;
  Angular 2 is all component and directive based. Controllers and $scope have been replaced. They have been replaced by components and directives. Components are directives with a template. A component is in HTML called with the &lt;angularComponent&gt; tag, the name of the selector within the HTML.
  &amp;lt;/p&amp;gt;


  &lt;h3&gt;Consistency&lt;/h3&gt;
  &lt;p&gt;
  Angular is a framework and provides significantly more opinions and functionality out of the box. With React, you usually pull a number of other libraries off the shelf to build an app. You’ll want libraries for routing, enforcing unidirectional flows, web API calls, testing, dependency management, and so on. The number of decisions is can be overwhelming.

  Angular offers more opinions out of the box, which helps you get started more quickly without feeling intimidated by decisions. This enforced consistency also helps new hires feel at home more quickly and makes switching developers between teams more practical.
  I admire how the Angular core team has embraced TypeScript, which leads to the next advantage…
  &lt;/p&gt;

  &lt;h3&gt;TypeScript&lt;/h3&gt;
  &lt;p&gt;
  This ties into the the section above on consistency. Angular 2 has taken a hard stance on which flavor of JavaScript to use. React examples are inconsistent and are presented in ES5 and ES6 and currently offers three different ways to declare components. This create mayhem for n00bs like myself. Angular also embraces decorators instead of extends.
  &lt;/p&gt;

  &lt;p&gt;
  While Angular 2 does not require TypeScript, the Angular core team uses it as default in documentation. That means examples and projects and documentations are all consistent.  
  &lt;/p&gt;

  &lt;h2&gt;Reduce Turnover&lt;/h2&gt;
  &lt;p&gt;
  The Angular 2 of today has been carefully an methodically developed and reinvention of a mature, comprehensive framework. In React, it’s your responsibility to sift through a bunch of disparate, fast-moving, open-source libraries into a comprehensive whole that plays well together. It’s both time-consuming and frustrating.
  &lt;/p&gt;

  &lt;h2&gt;ReactJS&lt;/h2&gt;
  &lt;p&gt;
  Time to shine React.
  &lt;/p&gt;

  &lt;h3&gt;JSX&lt;/h3&gt;
  &lt;p&gt;
  JSX is an HTML-like syntax that compiles down to JavaScript. Markup and code are composed in the same file. This means code completion gives you a hand as you type references to your component’s functions and variables. In contrast, Angular’s string-based templates come with the usual downsides: No code coloring in many editors, limited code completion support, and run-time failures. You’d normally expect poor error messaging as well, but the Angular team created their own HTML parser to fix that. (Bravo!)

  &lt;/p&gt;


  &lt;!-- IMAGE OF REACT HERE --&gt;
  &lt;a href=&quot;#&quot;&gt;
      &lt;img src=&quot;/img/react-bg.png&quot; alt=&quot;React JS Image&quot; /&gt;
  &lt;/a&gt;
  &lt;span class=&quot;caption text-muted&quot;&gt;React is a framework maintained by Facebook &lt;/span&gt;


  &lt;p&gt;
  If you don’t like Angular string-based templates, you can move the templates to a separate file. Composing components in a single compile-time checked file is one of the big reasons JSX is so special.
  &lt;/p&gt;

  &lt;h3&gt;Move Fast &amp;amp; Break Stuff&lt;/h3&gt;
  &lt;p&gt;
  When you make a typo in React’s JSX, it won’t compile. This means you know immediately exactly which line has an error. React tells you immediately when you forget to close a tag or reference a property that doesn’t exist. In fact, the JSX compiler specifies the line number where the typo occurred. This behavior speeds development.
  &lt;/p&gt;

  &lt;p&gt;
  In contrast, when you mistype a variable reference in Angular 2, nothing happens at all. Angular 2 fails quietly at run time instead of compile-time. It fails slowly. I load the app and wonder why my data is not displaying. Not fun.
  &lt;/p&gt;

  &lt;h3&gt;Optimized for JavaScript&lt;/h3&gt;
  &lt;p&gt;
  This is the fundamental difference between React and Angular. Unfortunately, Angular 2 remains HTML-centric rather than JavaScript-centric.
  &lt;/p&gt;

  &lt;p&gt;
  Angular’s HTML-centric design remains its greatest weakness.
  &lt;/p&gt;

  &lt;p&gt;
  JavaScript is far more powerful than HTML. Thus, it’s more logical to enhance JavaScript to support markup than to enhance HTML to support logic. HTML and JavaScript need to be glued together somehow, and React’s JavaScript-centric approach is fundamentally superior to Angular's HTML-centric approach.
  &lt;/p&gt;

  &lt;p&gt;
  Angular 2 continues Angular 1’s approach of trying to make HTML more powerful. So you have to utilize Angular 2's unique syntax for simple tasks like looping and conditionals. For example, Angular 2 offers both one and two way binding via two syntaxes that are unfortunately quite different:
  &lt;/p&gt;


  &lt;h2&gt;Tech Specs&lt;/h2&gt;
  &lt;p&gt;
  Alright, let's get down to the nitty-gritty. The Tech Specs.
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Angular 2: 566k (766k with RxJS)&lt;/li&gt;
    &lt;li&gt;Ember: 435k&lt;/li&gt;
    &lt;li&gt;Angular 1: 143k&lt;/li&gt;
    &lt;li&gt;React + Redux: 139k&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;IRL&lt;/h2&gt;
  &lt;p&gt;
    Several popular websites are coded in Angular and React. Below is a breakdown of each.

    &lt;ul&gt;
      &lt;li&gt;List of &lt;a href=&quot;https://github.com/facebook/react/wiki/Sites-Using-React&quot;&gt;React sites&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;List of Angular sites &lt;a href=&quot;https://www.madewithangular.com&quot;&gt;Angular Sites&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

  &lt;/p&gt;



  &lt;h2&gt;Summary&lt;/h2&gt;
  &lt;p&gt;
  Angular 2 is a huge improvement over version 1. The new component model is simpler to grasp than v1’s directives, it supports isomorphic/universal rendering, and it uses a virtual DOM offering 3–10x improvements in performance. These changes make Angular 2 very competitive with React. There’s no denying that its full-featured, opinionated nature offers some clear benefits by reducing “JavaScript fatigue”.
  &lt;/p&gt;
  &lt;p&gt;
  Angular 2’s size and syntax is considerably bigger than React. Angular’s commitment to HTML-centric design makes it complex compared to React’s simpler JavaScript-centric model. In React, you don’t learn framework-specific HTML shims like ngWhatever.
  &lt;/p&gt;
&lt;/angularComponent&gt;&lt;/p&gt;</content><author><name>Marco Pineda</name></author><summary type="html">Do a google search of 'javascript frameworks' and you get nearly 39MM results in .55 seconds. A top five search on Github lists these frameworks as the most popular in order from most popular to least:</summary></entry><entry><title type="html">Data Alchemy</title><link href="http://localhost:4000/2016/08/08/data-alchemy/" rel="alternate" type="text/html" title="Data Alchemy" /><published>2016-08-08T07:05:00-05:00</published><updated>2016-08-08T07:05:00-05:00</updated><id>http://localhost:4000/2016/08/08/data-alchemy</id><content type="html" xml:base="http://localhost:4000/2016/08/08/data-alchemy/">&lt;p&gt;Never in all their history has humanity been blessed with so much information. By the end of 2016, global IP traffic will reach 1.1 ZB per year or 88.7 EB per month. This means that in the course of a day, the average person in a Western city is said to be exposed to as much data as someone in the 15th century would encounter in their entire life.&lt;/p&gt;

&lt;p&gt;Data Science industry paragraph. Major innovations (e.g., Hadoop, Cassandra, HBase, Pig, Hive etc) have made data products easier to build. While the tools surrounding the industry have improved, data products are unique in that they are often difficult, complex and expensive for small teams with limited funds.&lt;/p&gt;

&lt;p&gt;To begin, we define a Data Product as a product that facilitates an end goal through the use of data. The fundamental idea in Data Mining is that you shouldn't solve the whole problem at once. Solve a simple piece that shows you whether there is interest, then build the MVP. Before you begin you must answer some questions:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Does anyone want or need your product?&lt;/li&gt;
    &lt;li&gt;Does the customer care?&lt;/li&gt;
    &lt;li&gt;Is there a market fit?&lt;/li&gt;
    &lt;li&gt;How long do we have to answer questions &lt;/li&gt;
  &lt;/ol&gt;

&lt;p&gt;Below are some methods that should help anyone create a product out of data.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Use Product Design&lt;/h2&gt;

&lt;blockquote&gt;The point is to have a conversation with your user...&lt;/blockquote&gt;

&lt;p&gt;One of the biggest challenges in Data Mining is getting the data in a useful form. One way to ensure clean data is to build a user interface that helps the user, and you, in the long run. To do this you can:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Support type-ahead&lt;/li&gt;
    &lt;li&gt;Prompt the user with &quot;Did you mean...?&quot;&lt;/li&gt;
  &lt;/ul&gt;

&lt;p&gt;The point is to have a conversation with your user rather than just a form. Engage the user to help you. This makes your analysis that much easier. Doing this solves two problems. 1) You're getting the user more involved and 2) you're getting clean data. &lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Make Winning Easy&lt;/h2&gt;

&lt;p&gt;Back when Amazon first began, pages contained product details, reviews, price and a button to buy the item. A user had no way to do comparison shopping. The user either went to the search box or left the site and went back to Google. Amazon needed to build pages that channeled users to other relevant products. They could have built a sophisticated recommendations engine but opted for a simpler system. They built 'collaborative filters' that added &quot;People who viewed this product also viewed&quot; to their pages. This was huge! Now, users can do product research without leaving the site and if they don't see what they want right away, Amazon channels them to another page.&lt;/p&gt;

&lt;p&gt;Collaborative filters is a great example of starting with a simple product that becomes more complex, once you know it works. As you begin to scale, you have to track the data for all purchases, then build the data stores to hold the data, then a processing layer, then developing processes to update the data&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Create a Product for the Real World&lt;/h2&gt;

&lt;p&gt;When you go into a store to buy something, you might look at prices and or reviews. Most likely you'll look at similar products near by. By adding a collaborative filter, Amazon built this experience into their web page. They crafted their digital product based off every day experiences centered around buying a product in the real world.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/post-sample-image.jpg&quot; alt=&quot;Post Sample Image&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;To go places and do things that have never been done before – that’s what living is all about.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Lightweight testing by creating for a small section of the larger problem will give you the flexibility to add limitations and constraints based off real world problems.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Give Data Back to the User to Create Additional Value&lt;/h2&gt;

&lt;p&gt;Give data back to the user and you can create both revenue and engagement. Users are no longer the customer, they are the product. They are 'data generators' that either assist in ad targeting or are sold to the highest bidder, or both. Giving data back to the user shows them that you're on their side and engagement should increase. With added engagement, you can test and analyze data and gain new insights and continue this cycle until your engagement tapers off.&lt;/p&gt;

&lt;p&gt;How do you give data back to the user? Some examples are LinkedIn's product called &quot;Who's Viewed Your Profile.&quot; This product lists the people who've viewed your profile. The data is timely and actionable and most importantly &lt;i&gt;addictive&lt;/i&gt;. Mint studies your credit card transactions to help you understand expenses and income and compare them to others in your demographic.&lt;/p&gt;

&lt;p&gt;Placeholder text by &lt;a href=&quot;http://spaceipsum.com/&quot;&gt;Space Ipsum&lt;/a&gt;. Photographs by &lt;a href=&quot;https://www.flickr.com/photos/nasacommons/&quot;&gt;NASA on The Commons&lt;/a&gt;.&lt;/p&gt;</content><author><name>Marco Pineda</name></author><summary type="html">Never in all their history has humanity been blessed with so much information. By the end of 2016, global IP traffic will reach 1.1 ZB per year or 88.7 EB per month. This means that in the course of a day, the average person in a Western city is said to be exposed to as much data as someone in the 15th century would encounter in their entire life.</summary></entry><entry><title type="html">Binary 101</title><link href="http://localhost:4000/2016/08/01/binary-101/" rel="alternate" type="text/html" title="Binary 101" /><published>2016-08-01T07:06:00-05:00</published><updated>2016-08-01T07:06:00-05:00</updated><id>http://localhost:4000/2016/08/01/binary-101</id><content type="html" xml:base="http://localhost:4000/2016/08/01/binary-101/">&lt;p&gt;1703 Gottfried Wilhelm Leibniz invents the Binary System.&lt;/p&gt;

&lt;p&gt;Leibniz (1646 -1716 ) was a German philosopher, polymath, and mathematician who wrote primarily in Latin and French. The modern binary number system was fully documented by Gottfried Leibniz in the 17th century in his article Explication de l'Arithmétique Binaire. Leibniz's system used 0 and 1, like the modern binary numeral system. Leibniz was aware of the I Ching and noted with fascination how its hexagrams correspond to the binary numbers from 0 to 111111.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Why Binary Matters&lt;/h2&gt;

&lt;p&gt;The binary system underlies modern technology of electronic digital computers. Computer memory comprises small elements that may only be in two states - off/on - that are associated with digits 0 and 1. Such an element is said to represent one bit - binary digit&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;How Binary Works&lt;/h2&gt;

&lt;p&gt;Binary numbers are written with only two symbols - 0 and 1. For example, a = 1101. Since symbols 0 and 1 are also a part of the decimal system and in fact of a positional system with any base, there's an ambiguity as to what 1101 actually stands for. To avoid confusion, the base is often written explicitly, like in a = (1101)2 or b = (1101)10. In the decimal system, 1101 is interpreted as 1 thousand 1 hundred 1, which is just a sum of powers of 10 with coefficients that are the digits of the number&lt;/p&gt;</content><author><name>Marco Pineda</name></author><summary type="html">1703 Gottfried Wilhelm Leibniz invents the Binary System.</summary></entry></feed>